#！/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@Time  : 2022/3/12  上午9:13
@Author: Skye
@File  : Find_Words.py 
"""


'''Search Function
input variables:square_string;
letters_list;
others:
letter_index: the index of the letter in purpose
flag:the number of the "head" letter
square_string_new: Make a new string : the rest of the string after that letter
letter_index_new:The new index of letter in the new string.
letter_index:The next letter in target's index the the whole string.
lst_index:To store the index if there are multiple letters in the string.
letter_second: The second letter of words.                                      
'''
def find_words(square_string, letters_list):
#traverse the whole letter_list and classify group by the first letter.
    for i in range(26):
        #Classify the words into groups by the first letter.
        letter = chr(65+i)
        for j in range(len(letters_list)):
            '''Process each letter in the letter list'''
            if letters_list[j][0] == letter:
                lst_index = [] #To store the index if there are multiple letters in the string.
                '''Judge if there is only one "head" letter in the string.'''
                flag = square_string.count(letter)
                '''None of the "head" letters are unique in the string but all are appread, so no condition of flag < 1 and flag = 1'''
                if flag < 1:
                    print('This word does not exist!')

                elif flag == 1:
                    letter_index = square_string.find(letter)
                    # print('Only one index is:{}'.format(letter_index))

                else:
                    '''Process the first time the letter appears.'''
                    letter_index = square_string.find(letter)
                    # print(letter_index)
                    lst_index.append(letter_index)
                    '''Process the rest letters'''
                    while flag > 1:
                        '''Make a new string : the rest of the string after that letter'''
                        square_string_new = square_string[letter_index + 1: len(square_string) + 1]
                        '''The new index of letter in the new string'''
                        letter_index_new = square_string_new.find(letter)
                        '''The next letter in target's index the the whole string.'''
                        letter_index = letter_index + 1 + letter_index_new
                        '''Put the new index into the list'''
                        lst_index.append(letter_index)
                        flag -= 1
            else:
                continue
            print("Index of {0} are:{1}".format(letter, lst_index))


            lst_index_second = []
            '''To store the second index where the letter appears, if the length is 0, this word is not appear in the string'''
            direction = ''
            letters_index_second = 0
            '''Find the direction of the words by finding the correct second letter'''
            for k in lst_index:
                try:
                    if letters_list[j][1] == square_string[k-15]:
                        letters_index_second = k - 15
                        # print('{0}排{1}列'.format(k // 14 + 1, k % 14 + 1))
                        # print("Left Top")
                        direction = 'LT'
                        # print(direction)
                        if direction != '':
                            lst_index_second.append(letters_index_second)
                        continue
                    elif letters_list[j][1] == square_string[k-14]:
                        letters_index_second = k - 14
                        # print('{0}排{1}列'.format(k // 14 + 1, k % 14 + 1))
                        # print("Top")
                        direction = 'T'
                        # print(direction)
                        if direction != '':
                            lst_index_second.append(letters_index_second)
                        continue
                    elif letters_list[j][1] == square_string[k-13]:
                        letters_index_second = k - 13
                        # print('{0}排{1}列'.format(k // 14 + 1, k % 14 + 1))
                        # print("Right Top")
                        direction = 'RT'
                        # print(direction)
                        if direction != '':
                            lst_index_second.append(letters_index_second)
                        continue
                    elif letters_list[j][1] == square_string[k-1]:
                        letters_index_second = k - 1
                        # print('{0}排{1}列'.format(k // 14 + 1, k % 14 + 1))
                        # print('left')
                        direction = 'L'
                        # print(direction)
                        if direction != '':
                            lst_index_second.append(letters_index_second)
                        continue
                    elif letters_list[j][1] == square_string[k+1]:
                        letters_index_second = k + 1
                        # print('{0}排{1}列'.format(k // 14 + 1, k % 14 + 1))
                        # print("right")
                        direction = 'R'
                        # print(direction)
                        if direction != '':
                            lst_index_second.append(letters_index_second)
                        continue
                    elif letters_list[j][1] == square_string[k+13]:
                        letters_index_second = k + 13
                        # print('{0}排{1}列'.format(k // 14 + 1, k % 14 + 1))
                        # print('Left Buttom')
                        direction = 'LB'
                        print(direction)
                        continue
                    elif letters_list[j][1] == square_string[k+14]:
                        letters_index_second = k + 14
                        # print('{0}排{1}列'.format(k // 14 + 1, k % 14 + 1))
                        # print('Buttom')
                        direction = 'B'
                        # print(direction)
                        if direction != '':
                            lst_index_second.append(letters_index_second)
                        continue
                    elif letters_list[j][1] == square_string[k+15]:
                        letters_index_second = k + 15
                        # print('{0}排{1}列'.format(k // 14 + 1, k % 14 + 1))
                        # print('Right Buttom')
                        direction = 'RB'
                        # print(direction)
                        if direction != '':
                            lst_index_second.append(letters_index_second)
                        continue

                except IndexError:
                    # print('Out of string.')
                    continue
            # print(lst_index_second)


            # lst_index_third = []
            '''Find the third letter with the direction'''
            for item in lst_index_second:
                if direction == 'LT':
                    if item // 14 == 0:
                        continue
                    if letters_list[j][2] == square_string[item - 15]:
                        print("Words being found, the first letter's index is row{0} column{1} and the direction is {2}].".format((item + 15) // 14 + 1, (item + 15) % 14 + 1, direction))
                        continue
                    else:
                        continue
                elif direction == 'T':
                    if item // 14 == 0:
                        continue
                    if letters_list[j][2] == square_string[item - 14]:
                        print("Words being found, the first letter's index is row{0} column{1} and the direction is {2}.".format((item + 14) // 14 + 1, (item + 14) % 14 + 1, direction))
                        continue
                    else:
                        continue
                elif direction == 'RT':
                    if item // 14 == 0:
                        continue
                    if letters_list[j][2] == square_string[item - 13]:
                        print("Words being found, the first letter's index is row{0} column{1} and the direction is {2}.".format((item + 13) // 14 + 1, (item + 13) % 14 + 1, direction))
                        continue
                    else:
                        continue
                elif direction == 'L':
                    if item % 14 == 0:
                        continue
                    if letters_list[j][2] == square_string[item - 1]:
                        print("Words being found, the first letter's index is row{0} column{1} and the direction is {2}.".format((item + 1) // 14 + 1, (item + 1) % 14 + 1, direction))
                        continue
                    else:
                        continue
                elif direction == 'R':
                    if item % 14 == 0:
                        continue
                    if letters_list[j][2] == square_string[item + 1]:
                        print("Words being found, the first letter's index is row{0} column{1} and the direction is {2}.".format((item - 1) // 14 + 1, (item - 1) % 14 + 1, direction))
                        continue
                    else:
                        continue
                elif direction == 'LB':
                    if item // 14 == 0:
                        continue
                    if letters_list[j][2] == square_string[item + 13]:
                        print("Words being found, the first letter's index is row{0} column{1} and the direction is {2}.".format((item - 13) // 14 + 1, (item - 13) % 14 + 1, direction))
                        continue
                    else:
                        continue
                elif direction == 'B':
                    if item // 14 == 0:
                        continue
                    if letters_list[j][2] == square_string[item + 14]:
                        print("Words being found, the first letter's index is row{0} column{1} and the direction is {2}.".format((item - 14) // 14 + 1, (item - 14) % 14 + 1, direction))
                        continue
                    else:
                        continue
                elif direction == 'RB':
                    if item % 14 < 14:
                        continue
                    if letters_list[j][2] == square_string[item + 15]:
                        print("Words being found, the first letter's index is row{0} column{1} and the direction is {2}.".format((item - 15) // 14 + 1, (item - 15) % 14 + 1, direction))
                        continue
                    else:
                        continue
            str_words_temp = [str(p) for p in letters_list[j]]
            str_words = ''.join(str_words_temp)
            print("{} does not exist in the string.".format(str_words))
            # print("Round{}".format(i))
            break #必须要
        # break #为了只看A的情况


'''Main Function 
Variables: square_string;
letters_list；
'''

if __name__ == '__main__':
    square_string ='''TGCPNIHPLODFPIHNEINTFGPANDAMAFHLRAUNIUGNEPTCRPRIORTIGERL???OGO???????DEPRIGAIOFLLESOHLLYODOAIFEIUGCOEGTNCDGPAHOPTMFPIOOALILRMOBOMLHCWOINLOIRENECOADOOTILNGAKEREENIISCARGRECHRRLIIEFODNIYERATANATNRLB'''
    # print(len(square_string))

    #words_string in target ( to be found )
    words_string = 'ALLIGATOR,MONKEY,BEAR,CHEETAH,LION,COW,CROCODILE,ELEPHANT,DOG,CAT,GOAT,FROG,RAT,MOUSE,PENGUIN,GIRAFFE,PANDA,TIGER,TURTLE,DOLPHIN'
    words_list = words_string.split(",")  #separate words by separator ","
    letters_list = []
    # print(words_list)

    #process the letters_list,separate words into letter and store them into each index of the list.
    for i in range(len(words_list)):
        words_list[i] = list(words_list[i])
        # print(words_list)
        letters_list.append(words_list[i])

    # print(letters_list)   #[['A', 'L', 'L', 'I', 'G', 'A', 'T', 'O', 'R'], ['M', 'O', 'N', 'K', 'E', 'Y'], ['B', 'E', 'A', 'R'], ['C', 'H', 'E', 'E', 'T', 'A', 'H'], ['L', 'I', 'O', 'N'], ['C', 'O', 'W'], ['C', 'R', 'O', 'C', 'O', 'D', 'I', 'L', 'E'], ['E', 'L', 'E', 'P', 'H', 'A', 'N', 'T'], ['D', 'O', 'G'], ['C', 'A', 'T'], ['G', 'O', 'A', 'T'], ['F', 'R', 'O', 'G'], ['R', 'A', 'T'], ['M', 'O', 'U', 'S', 'E'], ['P', 'E', 'N', 'G', 'U', 'I', 'N'], ['G', 'I', 'R', 'A', 'F', 'F', 'E'], ['P', 'A', 'N', 'D', 'A'], ['T', 'I', 'G', 'E', 'R'], ['T', 'U', 'R', 'T', 'L', 'E'], ['D', 'O', 'L', 'P', 'H', 'I', 'N']]
    find_words(square_string, letters_list)

